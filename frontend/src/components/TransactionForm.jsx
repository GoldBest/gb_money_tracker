import { useState, useEffect } from 'react'
import { useTelegram } from '../contexts/TelegramContext'
import { X, Plus } from 'lucide-react'


const TransactionForm = ({ onClose, onSuccess }) => {
  const { user, api } = useTelegram()
  const [categories, setCategories] = useState([])
  const [loading, setLoading] = useState(false)
  const [formData, setFormData] = useState({
    amount: '',
    description: '',
    type: 'expense',
    category_id: ''
  })
  const [hasChanges, setHasChanges] = useState(false)

  useEffect(() => {
    if (user) {
      loadCategories()
    }
  }, [user, formData.type])

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ
  useEffect(() => {
    const hasData = formData.amount || formData.description || formData.category_id
    setHasChanges(hasData)
  }, [formData])

  const loadCategories = async () => {
    try {
      const response = await api.get(`/api/users/${user.id}/categories`)
      const filteredCategories = response.data.filter(cat => cat.type === formData.type)
      setCategories(filteredCategories)
      
      // Auto-select first category if none selected
      if (!formData.category_id && filteredCategories.length > 0) {
        setFormData(prev => ({ ...prev, category_id: filteredCategories[0].id }))
      }
    } catch (error) {
      console.error('Error loading categories:', error)
    }
  }

  const [budgetWarnings, setBudgetWarnings] = useState([])

  const handleSubmit = async (e) => {
    e.preventDefault()
    
    if (!formData.amount || !formData.category_id) {
      window.showTelegramAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è')
      return
    }

    try {
      setLoading(true)
      const response = await api.post('/api/transactions', {
        ...formData,
        user_id: user.id,
        amount: parseFloat(formData.amount)
      })
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—é–¥–∂–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
      if (response.data.budgetWarnings && response.data.budgetWarnings.length > 0) {
        setBudgetWarnings(response.data.budgetWarnings)
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const warningMessages = response.data.budgetWarnings.map(w => w.message).join('\n\n')
        window.showTelegramAlert(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n\n${warningMessages}`)
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      } else {
        window.showTelegramAlert('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!')
      }
      
      onSuccess()
    } catch (error) {
      console.error('Error creating transaction:', error)
      window.showTelegramAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
    } finally {
      setLoading(false)
    }
  }

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }))
  }

  const handleClose = () => {
    if (hasChanges) {
      window.showTelegramConfirm(
        '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ó–∞–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É?',
        (confirmed) => {
          if (confirmed) {
            onClose()
          }
        }
      )
    } else {
      onClose()
    }
  }

  return (
    <div className="modal-overlay">
      <div className="modal">
        <div className="modal-header">
          <h2>–ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è</h2>
          <button className="close-button button-animation" onClick={handleClose}>
            <X size={20} />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="transaction-form">
          <div className="form-group">
            <label>–¢–∏–ø</label>
            <div className="type-selector">
              <button
                type="button"
                className={`type-button button-animation ${formData.type === 'expense' ? 'active' : ''}`}
                onClick={() => {
                  handleInputChange('type', 'expense');
                }}
              >
                –†–∞—Å—Ö–æ–¥
              </button>
              <button
                type="button"
                className={`type-button button-animation ${formData.type === 'income' ? 'active' : ''}`}
                onClick={() => {
                  handleInputChange('type', 'income');
                }}
              >
                –î–æ—Ö–æ–¥
              </button>
            </div>
          </div>

          <div className="form-group">
            <label>–°—É–º–º–∞ *</label>
            <input
              type="number"
              step="0.01"
              value={formData.amount}
              onChange={(e) => handleInputChange('amount', e.target.value)}
              placeholder="0.00"
              required
            />
          </div>

          <div className="form-group">
            <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è *</label>
            <select
              value={formData.category_id}
              onChange={(e) => handleInputChange('category_id', e.target.value)}
              required
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
              {categories.map(category => (
                <option key={category.id} value={category.id}>
                  {category.name}
                </option>
              ))}
            </select>
          </div>

          <div className="form-group">
            <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
            <input
              type="text"
              value={formData.description}
              onChange={(e) => handleInputChange('description', e.target.value)}
              placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
            />
          </div>

          {/* –ë—é–¥–∂–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è */}
          {budgetWarnings.length > 0 && (
            <div className="budget-warnings">
              <h4>‚ö†Ô∏è –ë—é–¥–∂–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è</h4>
              {budgetWarnings.map((warning, index) => (
                <div 
                  key={index} 
                  className={`warning-item ${warning.type === 'budget_exceeded' ? 'exceeded' : 'warning'}`}
                >
                  <div className="warning-icon">
                    {warning.type === 'budget_exceeded' ? 'üö®' : '‚ö†Ô∏è'}
                  </div>
                  <div className="warning-content">
                    <p className="warning-message">{warning.message}</p>
                    <div className="warning-details">
                      <span>–¢–µ–∫—É—â–∏–µ —Ç—Ä–∞—Ç—ã: {warning.current.toLocaleString()} ‚ÇΩ</span>
                      <span>–õ–∏–º–∏—Ç: {warning.limit.toLocaleString()} ‚ÇΩ</span>
                      <span>–ù–æ–≤—ã–π –∏—Ç–æ–≥: {warning.newTotal.toLocaleString()} ‚ÇΩ</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}

          <div className="form-actions">
            <button type="button" className="button secondary button-animation" onClick={handleClose}>
              –û—Ç–º–µ–Ω–∞
            </button>
            <button type="submit" className="button primary button-animation" disabled={loading}>
              {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}

export default TransactionForm
