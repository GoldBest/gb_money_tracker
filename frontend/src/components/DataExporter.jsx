import { useState, useEffect } from 'react'
import { useTelegram } from '../contexts/TelegramContext'
import { Download, FileText, FileSpreadsheet, Calendar, Filter, X } from 'lucide-react'
import { hapticFeedback } from '../utils/haptic'

const DataExporter = () => {
  const { user, api } = useTelegram()
  const [exporting, setExporting] = useState(false)
  const [exportOptions, setExportOptions] = useState({
    format: 'excel',
    dateFrom: '',
    dateTo: '',
    includeCategories: true,
    includeTransactions: true,
    includeGoals: false,
    includeStats: true
  })
  const [showFilters, setShowFilters] = useState(false)

  const handleExport = async () => {
    if (!user) return

    try {
      setExporting(true)
      hapticFeedback.medium()

      // –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
      const params = new URLSearchParams({
        user_id: user.id,
        format: exportOptions.format,
        include_categories: exportOptions.includeCategories,
        include_transactions: exportOptions.includeTransactions,
        include_goals: exportOptions.includeGoals,
        include_stats: exportOptions.includeStats
      })

      if (exportOptions.dateFrom) {
        params.append('date_from', exportOptions.dateFrom)
      }
      if (exportOptions.dateTo) {
        params.append('date_to', exportOptions.dateTo)
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç
      const response = await api.get(`/api/export?${params.toString()}`, {
        responseType: 'blob'
      })

      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const url = window.URL.createObjectURL(new Blob([response.data]))
      const link = document.createElement('a')
      link.href = url
      
      const timestamp = new Date().toISOString().split('T')[0]
              const filename = `gb_money_tracker_${timestamp}.${exportOptions.format === 'excel' ? 'xlsx' : 'csv'}`
      
      link.setAttribute('download', filename)
      document.body.appendChild(link)
      link.click()
      link.remove()
      window.URL.revokeObjectURL(url)

      hapticFeedback.success()
      window.showTelegramAlert('–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
    } catch (error) {
      console.error('Export error:', error)
      hapticFeedback.error()
      window.showTelegramAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö')
    } finally {
      setExporting(false)
    }
  }

  const handleOptionChange = (option, value) => {
    setExportOptions(prev => ({ ...prev, [option]: value }))
    hapticFeedback.light()
  }

  const resetOptions = () => {
    setExportOptions({
      format: 'excel',
      dateFrom: '',
      dateTo: '',
      includeCategories: true,
      includeTransactions: true,
      includeGoals: false,
      includeStats: true
    })
    hapticFeedback.medium()
  }

  const getFormatIcon = (format) => {
    return format === 'excel' ? <FileSpreadsheet size={20} /> : <FileText size={20} />
  }

  const getFormatLabel = (format) => {
    return format === 'excel' ? 'Excel (.xlsx)' : 'CSV (.csv)'
  }

  return (
    <div className="data-exporter">
      <div className="exporter-header">
        <h3>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</h3>
        <p>–í—ã–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</p>
      </div>

      <div className="export-options">
        {/* –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ */}
        <div className="option-group">
          <label>–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞</label>
          <div className="format-selector">
            {['excel', 'csv'].map(format => (
              <button
                key={format}
                className={`format-option haptic-trigger ${exportOptions.format === format ? 'active' : ''}`}
                onClick={() => handleOptionChange('format', format)}
              >
                {getFormatIcon(format)}
                <span>{getFormatLabel(format)}</span>
              </button>
            ))}
          </div>
        </div>

        {/* –ü–µ—Ä–∏–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∞ */}
        <div className="option-group">
          <label>–ü–µ—Ä–∏–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∞</label>
          <div className="date-range">
            <div className="date-input">
              <Calendar size={16} />
              <input
                type="date"
                value={exportOptions.dateFrom}
                onChange={(e) => handleOptionChange('dateFrom', e.target.value)}
                placeholder="–û—Ç"
              />
            </div>
            <span className="date-separator">‚Äî</span>
            <div className="date-input">
              <Calendar size={16} />
              <input
                type="date"
                value={exportOptions.dateTo}
                onChange={(e) => handleOptionChange('dateTo', e.target.value)}
                placeholder="–î–æ"
              />
            </div>
          </div>
          <small>–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö</small>
        </div>

        {/* –ß—Ç–æ –≤–∫–ª—é—á–∞—Ç—å */}
        <div className="option-group">
          <label>–ß—Ç–æ –≤–∫–ª—é—á–∏—Ç—å –≤ —ç–∫—Å–ø–æ—Ä—Ç</label>
          <div className="include-options">
            <label className="checkbox-option">
              <input
                type="checkbox"
                checked={exportOptions.includeTransactions}
                onChange={(e) => handleOptionChange('includeTransactions', e.target.checked)}
              />
              <span>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</span>
            </label>
            
            <label className="checkbox-option">
              <input
                type="checkbox"
                checked={exportOptions.includeCategories}
                onChange={(e) => handleOptionChange('includeCategories', e.target.checked)}
              />
              <span>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</span>
            </label>
            
            <label className="checkbox-option">
              <input
                type="checkbox"
                checked={exportOptions.includeGoals}
                onChange={(e) => handleOptionChange('includeGoals', e.target.checked)}
              />
              <span>–¶–µ–ª–∏</span>
            </label>
            
            <label className="checkbox-option">
              <input
                type="checkbox"
                checked={exportOptions.includeStats}
                onChange={(e) => handleOptionChange('includeStats', e.target.checked)}
              />
              <span>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</span>
            </label>
          </div>
        </div>

        {/* –ë—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–∏–æ–¥—ã */}
        <div className="option-group">
          <label>–ë—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–∏–æ–¥—ã</label>
          <div className="quick-periods">
            {[
              { label: '–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü', days: 30 },
              { label: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞', days: 90 },
              { label: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤', days: 180 },
              { label: '–¢–µ–∫—É—â–∏–π –≥–æ–¥', days: 365 }
            ].map(period => {
              const dateFrom = new Date()
              dateFrom.setDate(dateFrom.getDate() - period.days)
              return (
                <button
                  key={period.days}
                  className="period-button haptic-trigger"
                  onClick={() => {
                    handleOptionChange('dateFrom', dateFrom.toISOString().split('T')[0])
                    handleOptionChange('dateTo', new Date().toISOString().split('T')[0])
                  }}
                >
                  {period.label}
                </button>
              )
            })}
          </div>
        </div>
      </div>

      {/* –î–µ–π—Å—Ç–≤–∏—è */}
      <div className="exporter-actions">
        <button
          className="action-button secondary haptic-trigger"
          onClick={resetOptions}
        >
          –°–±—Ä–æ—Å–∏—Ç—å
        </button>
        
        <button
          className="action-button primary haptic-trigger"
          onClick={handleExport}
          disabled={exporting || (!exportOptions.includeTransactions && !exportOptions.includeCategories && !exportOptions.includeGoals && !exportOptions.includeStats)}
        >
          {exporting ? (
            <>
              <div className="loading-spinner"></div>
              –≠–∫—Å–ø–æ—Ä—Ç...
            </>
          ) : (
            <>
              <Download size={20} />
              –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
            </>
          )}
        </button>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="export-info">
        <h4>–ß—Ç–æ –±—É–¥–µ—Ç –≤ —Ñ–∞–π–ª–µ:</h4>
        <ul>
          {exportOptions.includeTransactions && (
            <li>üìä –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –¥–∞—Ç–∞–º–∏, —Å—É–º–º–∞–º–∏, –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏</li>
          )}
          {exportOptions.includeCategories && (
            <li>üè∑Ô∏è –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ —Ç–∏–ø–∞–º–∏</li>
          )}
          {exportOptions.includeGoals && (
            <li>üéØ –¢–µ–∫—É—â–∏–µ —Ü–µ–ª–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏</li>
          )}
          {exportOptions.includeStats && (
            <li>üìà –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ—Ö–æ–¥–∞–º –∏ —Ä–∞—Å—Ö–æ–¥–∞–º</li>
          )}
        </ul>
        
        <div className="format-info">
          <strong>{exportOptions.format === 'excel' ? 'Excel —Ñ–æ—Ä–º–∞—Ç:' : 'CSV —Ñ–æ—Ä–º–∞—Ç:'}</strong>
          {exportOptions.format === 'excel' ? (
            <span>–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ñ–æ—Ä–º—É–ª—ã</span>
          ) : (
            <span>–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –ª—é–±—ã–º–∏ —Ç–∞–±–ª–∏—á–Ω—ã–º–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞–º–∏</span>
          )}
        </div>
      </div>
    </div>
  )
}

export default DataExporter
