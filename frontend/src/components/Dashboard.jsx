import { useState, useEffect } from 'react'
import { useTelegram } from '../contexts/TelegramContext'
import { Plus, TrendingUp, TrendingDown, DollarSign, Wallet } from 'lucide-react'
import NotificationManager from './NotificationManager'
import PullToRefresh from './PullToRefresh'
import AnimatedCard from './AnimatedCard'
import AnimatedButton from './AnimatedButton'
import { hapticFeedback } from '../utils/haptic'

const Dashboard = ({ onAddTransaction }) => {
  const { user, api } = useTelegram()
  const [stats, setStats] = useState(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    if (user) {
      loadStats()
    }
  }, [user])

  const loadStats = async () => {
    try {
      setLoading(true)
      const response = await api.get(`/api/users/${user.id}/stats?period=month`)
      setStats(response.data)
      hapticFeedback.success()
    } catch (error) {
      console.error('Error loading stats:', error)
      window.showTelegramAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
      hapticFeedback.error()
    } finally {
      setLoading(false)
    }
  }

  if (loading) {
    return (
      <div className="dashboard">
        <div className="loading">
          <div className="loading-spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
        </div>
      </div>
    )
  }

  const balance = stats?.balance || 0
  const totalIncome = stats?.total_income || 0
  const totalExpense = stats?.total_expense || 0
  const totalTransactions = stats?.total_transactions || 0

  // –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  if (totalTransactions === 0) {
    return (
      <PullToRefresh onRefresh={loadStats}>
        <div className="dashboard">
          <AnimatedCard
            variant="gradient"
            hoverEffect="glow"
            icon="üí∞"
            title="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GB Money Tracker!"
            className="welcome-card"
          >
            <p className="text-gray-600 dark:text-gray-400 mb-6">
              –î–ª—è –≤–∞—Å —Å–æ–∑–¥–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
            </p>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
              <AnimatedCard
                variant="glass"
                hoverEffect="scale"
                icon="üìà"
                title="–î–æ—Ö–æ–¥—ã"
                className="info-card"
              >
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  –ó–∞—Ä–ø–ª–∞—Ç–∞, –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –ø–æ–¥–∞—Ä–∫–∏
                </p>
              </AnimatedCard>
              
              <AnimatedCard
                variant="glass"
                hoverEffect="scale"
                icon="üìâ"
                title="–†–∞—Å—Ö–æ–¥—ã"
                className="info-card"
              >
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  –ü—Ä–æ–¥—É–∫—Ç—ã, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
                </p>
              </AnimatedCard>
            </div>
            
            <AnimatedButton
              variant="primary"
              size="large"
              onClick={() => {
                hapticFeedback.light();
                onAddTransaction();
              }}
              icon={<Plus size={20} />}
              fullWidth
              className="welcome-button"
            >
              –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            </AnimatedButton>
          </AnimatedCard>
          
          <NotificationManager />
        </div>
      </PullToRefresh>
    )
  }

  return (
    <PullToRefresh onRefresh={loadStats}>
      <div className="dashboard">
        <AnimatedCard
          variant="gradient"
          hoverEffect="glow"
          icon={<DollarSign className="w-8 h-8" />}
          title="–ë–∞–ª–∞–Ω—Å"
          className="balance-card"
        >
          <div className={`text-4xl font-bold text-center ${balance >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}`}>
            {balance >= 0 ? '+' : ''}{balance.toLocaleString('ru-RU')} ‚ÇΩ
          </div>
        </AnimatedCard>

        <div className="stats-grid">
          <AnimatedCard
            variant="elevated"
            hoverEffect="lift"
            icon={<TrendingUp className="w-6 h-6 text-green-500" />}
            title="–î–æ—Ö–æ–¥—ã"
            className="stat-card"
          >
            <div className="text-2xl font-bold text-green-600 dark:text-green-400">
              +{totalIncome.toLocaleString('ru-RU')} ‚ÇΩ
            </div>
          </AnimatedCard>

          <AnimatedCard
            variant="elevated"
            hoverEffect="lift"
            icon={<TrendingDown className="w-6 h-6 text-red-500" />}
            title="–†–∞—Å—Ö–æ–¥—ã"
            className="stat-card"
          >
            <div className="text-2xl font-bold text-red-600 dark:text-red-400">
              -{totalExpense.toLocaleString('ru-RU')} ‚ÇΩ
            </div>
          </AnimatedCard>

          <AnimatedCard
            variant="elevated"
            hoverEffect="lift"
            icon={<Wallet className="w-6 h-6 text-blue-500" />}
            title="–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"
            className="stat-card"
          >
            <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">
              {totalTransactions}
            </div>
          </AnimatedCard>
        </div>

        <AnimatedButton
          variant="primary"
          size="large"
          onClick={() => {
            hapticFeedback.light();
            onAddTransaction();
          }}
          icon={<Plus size={20} />}
          fullWidth
          className="add-transaction-button"
        >
          –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        </AnimatedButton>
        
        <NotificationManager />
      </div>
    </PullToRefresh>
  )
}

export default Dashboard
