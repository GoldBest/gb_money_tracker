// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints
const axios = require('axios');

const BASE_URL = 'http://localhost:3001/api';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testUser = {
  telegram_id: '123456789',
  username: 'test_user',
  first_name: 'Test User'
};

const testTransaction = {
  amount: 1000,
  description: '–¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è',
  type: 'expense',
  category_id: 1,
  user_id: 1
};

async function testAPI() {
  console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...\n');

  try {
    // 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const userResponse = await axios.post(`${BASE_URL}/users`, testUser);
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', userResponse.data);
    const userId = userResponse.data.id;

    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
    const categoriesResponse = await axios.get(`${BASE_URL}/users/${userId}/categories`);
    console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã:', categoriesResponse.data.length, '–∫–∞—Ç–µ–≥–æ—Ä–∏–π');

    // 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\n3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    const transactionData = { ...testTransaction, user_id: userId };
    const transactionResponse = await axios.post(`${BASE_URL}/transactions`, transactionData);
    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', transactionResponse.data);

    // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\n4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    const transactionsResponse = await axios.get(`${BASE_URL}/users/${userId}/transactions`);
    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã:', transactionsResponse.data.length, '—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');

    // 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('\n5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    const statsResponse = await axios.get(`${BASE_URL}/users/${userId}/stats?period=month`);
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', {
      balance: statsResponse.data.balance,
      total_income: statsResponse.data.total_income,
      total_expense: statsResponse.data.total_expense,
      total_transactions: statsResponse.data.total_transactions
    });

    // 6. –°–æ–∑–¥–∞–Ω–∏–µ –µ—â–µ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–æ—Ö–æ–¥)
    console.log('\n6. –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ—Ö–æ–¥–∞...');
    const incomeTransaction = {
      amount: 5000,
      description: '–ó–∞—Ä–ø–ª–∞—Ç–∞',
      type: 'income',
      category_id: categoriesResponse.data.find(c => c.type === 'income').id,
      user_id: userId
    };
    const incomeResponse = await axios.post(`${BASE_URL}/transactions`, incomeTransaction);
    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ—Ö–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∞:', incomeResponse.data);

    // 7. –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\n7. –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...');
    const updatedStatsResponse = await axios.get(`${BASE_URL}/users/${userId}/stats?period=month`);
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', {
      balance: updatedStatsResponse.data.balance,
      total_income: updatedStatsResponse.data.total_income,
      total_expense: updatedStatsResponse.data.total_expense,
      total_transactions: updatedStatsResponse.data.total_transactions
    });

    // 8. –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\n8. –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    const deleteResponse = await axios.delete(`${BASE_URL}/transactions/${transactionResponse.data.id}`);
    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞:', deleteResponse.data);

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    const finalStatsResponse = await axios.get(`${BASE_URL}/users/${userId}/stats?period=month`);
    console.log({
      balance: finalStatsResponse.data.balance,
      total_income: finalStatsResponse.data.total_income,
      total_expense: finalStatsResponse.data.total_expense,
      total_transactions: finalStatsResponse.data.total_transactions
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.response?.data || error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  testAPI();
}

module.exports = { testAPI };
