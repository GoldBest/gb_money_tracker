#!/bin/bash

echo "üöÄ –ë–´–°–¢–†–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ê–í–¢–û–î–ï–ü–õ–û–Ø"
echo "================================"
echo ""

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
if [ ! -f "package.json" ]; then
    error "–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞!"
    exit 1
fi

echo "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –ø—Ä–∏ push –≤ main/master –≤–µ—Ç–∫—É."
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º git —Å—Ç–∞—Ç—É—Å
if [ ! -d ".git" ]; then
    error "–≠—Ç–æ –Ω–µ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ GitHub Actions
if [ ! -d ".github/workflows" ]; then
    warning "–ü–∞–ø–∫–∞ .github/workflows –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–µ–º..."
    mkdir -p .github/workflows
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ deploy.yml
if [ ! -f ".github/workflows/deploy.yml" ]; then
    error "–§–∞–π–ª .github/workflows/deploy.yml –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    echo "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ GitHub Actions workflow."
    exit 1
fi

success "GitHub Actions workflow –Ω–∞–π–¥–µ–Ω"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
CURRENT_BRANCH=$(git branch --show-current)
log "–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: $CURRENT_BRANCH"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–¥–∞–ª–µ–Ω–Ω–∞—è –≤–µ—Ç–∫–∞
REMOTE_BRANCH=$(git ls-remote --heads origin main 2>/dev/null | head -n1 | cut -f2 | sed 's/refs\/heads\///')
if [ -z "$REMOTE_BRANCH" ]; then
    REMOTE_BRANCH=$(git ls-remote --heads origin master 2>/dev/null | head -n1 | cut -f2 | sed 's/refs\/heads\///')
fi

if [ -z "$REMOTE_BRANCH" ]; then
    warning "–£–¥–∞–ª–µ–Ω–Ω–∞—è –≤–µ—Ç–∫–∞ main/master –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    echo "–°–æ–∑–¥–∞–π—Ç–µ –≤–µ—Ç–∫—É main –∏–ª–∏ master –Ω–∞ GitHub"
    exit 1
fi

log "–£–¥–∞–ª–µ–Ω–Ω–∞—è –≤–µ—Ç–∫–∞: $REMOTE_BRANCH"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–æ–º–º–∏—Ç–∞
if [ -n "$(git status --porcelain)" ]; then
    warning "–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
    echo "–¢–µ–∫—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    git status --short
    
    read -p "–•–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è? (y/n): " COMMIT_CHANGES
    
    if [ "$COMMIT_CHANGES" = "y" ] || [ "$COMMIT_CHANGES" = "Y" ]; then
        git add .
        read -p "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞: " COMMIT_MESSAGE
        if [ -z "$COMMIT_MESSAGE" ]; then
            COMMIT_MESSAGE="feat: setup auto-deploy"
        fi
        git commit -m "$COMMIT_MESSAGE"
        success "–ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã"
    else
        error "–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è!"
        exit 1
    fi
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ push
if [ "$CURRENT_BRANCH" != "$REMOTE_BRANCH" ]; then
    warning "–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞ ($CURRENT_BRANCH) –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —É–¥–∞–ª–µ–Ω–Ω–æ–π ($REMOTE_BRANCH)"
    read -p "–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ $REMOTE_BRANCH? (y/n): " SWITCH_BRANCH
    
    if [ "$SWITCH_BRANCH" = "y" ] || [ "$SWITCH_BRANCH" = "Y" ]; then
        git checkout $REMOTE_BRANCH
        success "–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –≤–µ—Ç–∫—É $REMOTE_BRANCH"
    else
        error "–°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –≤–µ—Ç–∫—É $REMOTE_BRANCH!"
        exit 1
    fi
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è push
LOCAL_COMMIT=$(git rev-parse HEAD)
REMOTE_COMMIT=$(git rev-parse origin/$REMOTE_BRANCH)

if [ "$LOCAL_COMMIT" = "$REMOTE_COMMIT" ]; then
    success "–õ–æ–∫–∞–ª—å–Ω–∞—è –∏ —É–¥–∞–ª–µ–Ω–Ω–∞—è –≤–µ—Ç–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"
else
    warning "–ï—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è push"
    git log --oneline origin/$REMOTE_BRANCH..HEAD
    
    read -p "–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å push? (y/n): " PUSH_CHANGES
    
    if [ "$PUSH_CHANGES" = "y" ] || [ "$PUSH_CHANGES" = "Y" ]; then
        git push origin $REMOTE_BRANCH
        success "–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ GitHub"
    else
        error "–°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ push!"
        exit 1
    fi
fi

echo ""
success "üéâ –ê–í–¢–û–î–ï–ü–õ–û–ô –ù–ê–°–¢–†–û–ï–ù!"
echo ""
echo "üìù –ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –¥–∞–ª—å—à–µ:"
echo "  1. GitHub Actions –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è"
echo "  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤: https://github.com/$(git config --get remote.origin.url | sed 's/.*github.com[:/]\([^/]*\)\/\([^.]*\).*/\1\/\2/')/actions"
echo ""
echo "üîß –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
echo "  ./scripts/setup-github-secrets.sh"
echo ""
echo "üöÄ –ò–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã –≤—Ä—É—á–Ω—É—é –≤ GitHub:"
echo "  Settings ‚Üí Secrets and variables ‚Üí Actions"
echo ""
echo "üìã –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ–∫—Ä–µ—Ç—ã:"
echo "  - VERCEL_TOKEN"
echo "  - VERCEL_PROJECT_ID" 
echo "  - VERCEL_ORG_ID"
echo "  - RAILWAY_TOKEN"
echo "  - RAILWAY_SERVICE_NAME"
echo ""
echo "‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –∫–∞–∂–¥–æ–º push –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π."
