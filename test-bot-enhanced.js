#!/usr/bin/env node

/**
 * üß™ –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç Telegram –±–æ—Ç–∞ –¥–ª—è GB Money Tracker
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–æ—Ç–∞ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */

console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
try {
  const config = require('./backend/config.js');
  console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
  console.log(`   - –ü–æ—Ä—Ç: ${config.PORT}`);
  console.log(`   - WebApp URL: ${config.WEBAPP_URL}`);
  console.log(`   - –†–µ–∂–∏–º: ${config.NODE_ENV}`);
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –±–æ—Ç–∞
console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –±–æ—Ç–∞...');
const fs = require('fs');
const path = require('path');

const botFiles = [
  'backend/bot.js',
  'backend/server.js',
  'backend/config.js'
];

botFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file} - –Ω–∞–π–¥–µ–Ω`);
  } else {
    console.log(`‚ùå ${file} - –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
const envPath = path.join(__dirname, 'backend', '.env');
if (fs.existsSync(envPath)) {
  console.log('‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω');
  const envContent = fs.readFileSync(envPath, 'utf8');
  const hasBotToken = envContent.includes('BOT_TOKEN');
  const hasWebAppUrl = envContent.includes('WEBAPP_URL');
  
  console.log(`   - BOT_TOKEN: ${hasBotToken ? '‚úÖ' : '‚ùå'}`);
  console.log(`   - WEBAPP_URL: ${hasWebAppUrl ? '‚úÖ' : '‚ùå'}`);
} else {
  console.log('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω');
  console.log('   –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª backend/.env —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:');
  console.log('   BOT_TOKEN=your_bot_token_here');
  console.log('   WEBAPP_URL=https://your-domain.com');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
const dbPath = path.join(__dirname, 'backend', 'money.db');
if (fs.existsSync(dbPath)) {
  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞');
  const stats = fs.statSync(dbPath);
  const sizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
  console.log(`   - –†–∞–∑–º–µ—Ä: ${sizeInMB} MB`);
  console.log(`   - –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${stats.mtime.toLocaleString('ru-RU')}`);
} else {
  console.log('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json
console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
const packagePath = path.join(__dirname, 'backend', 'package.json');
if (fs.existsSync(packagePath)) {
  try {
    const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
    const hasBotApi = packageJson.dependencies && packageJson.dependencies['node-telegram-bot-api'];
    const hasExpress = packageJson.dependencies && packageJson.dependencies.express;
    
    console.log('‚úÖ package.json –Ω–∞–π–¥–µ–Ω');
    console.log(`   - node-telegram-bot-api: ${hasBotApi ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - express: ${hasExpress ? '‚úÖ' : '‚ùå'}`);
    
    if (!hasBotApi) {
      console.log('   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install node-telegram-bot-api --prefix backend');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json:', error.message);
  }
} else {
  console.log('‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º ngrok —Ç—É–Ω–Ω–µ–ª–∏
console.log('\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ ngrok —Ç—É–Ω–Ω–µ–ª–µ–π...');
const ngrokLogPath = path.join(__dirname, 'ngrok.log');
if (fs.existsSync(ngrokLogPath)) {
  console.log('‚úÖ Ngrok –ª–æ–≥ –Ω–∞–π–¥–µ–Ω');
  const logContent = fs.readFileSync(ngrokLogPath, 'utf8');
  const hasTunnels = logContent.includes('tunnel established');
  const hasErrors = logContent.includes('error');
  
  console.log(`   - –¢—É–Ω–Ω–µ–ª–∏: ${hasTunnels ? '‚úÖ' : '‚ùå'}`);
  console.log(`   - –û—à–∏–±–∫–∏: ${hasErrors ? '‚ö†Ô∏è' : '‚úÖ'}`);
} else {
  console.log('‚ùå Ngrok –ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–ø—É—Å–∫–∞
console.log('\n7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞...');
const scripts = [
  'setup-bot.sh',
  'start-ngrok.sh'
];

scripts.forEach(script => {
  if (fs.existsSync(script)) {
    const stats = fs.statSync(script);
    const isExecutable = (stats.mode & fs.constants.S_IXUSR) !== 0;
    console.log(`‚úÖ ${script} - –Ω–∞–π–¥–µ–Ω ${isExecutable ? '(–∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π)' : '(–Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π)'}`);
  } else {
    console.log(`‚ùå ${script} - –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoints
console.log('\n8. –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints...');
const serverPath = path.join(__dirname, 'backend', 'server.js');
if (fs.existsSync(serverPath)) {
  const serverContent = fs.readFileSync(serverPath, 'utf8');
  const endpoints = [
    '/api/health',
    '/api/users',
    '/api/categories',
    '/api/transactions',
    '/api/stats'
  ];
  
  endpoints.forEach(endpoint => {
    const hasEndpoint = serverContent.includes(endpoint);
    console.log(`   ${endpoint}: ${hasEndpoint ? '‚úÖ' : '‚ùå'}`);
  });
} else {
  console.log('‚ùå server.js –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
console.log('\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run dev:backend');
console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ ngrok —Ç—É–Ω–Ω–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã: ./start-ngrok.sh');
console.log('3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞: ./setup-bot.sh');
console.log('4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ Telegram');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
console.log('\n9. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...');
const http = require('http');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ backend
const checkBackend = () => {
  return new Promise((resolve) => {
    const req = http.request({
      hostname: 'localhost',
      port: 3001,
      path: '/api/health',
      method: 'GET',
      timeout: 5000
    }, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          const health = JSON.parse(data);
          resolve({
            status: 'online',
            database: health.database,
            timestamp: health.timestamp
          });
        } catch (error) {
          resolve({ status: 'error', message: 'Invalid JSON response' });
        }
      });
    });
    
    req.on('error', () => resolve({ status: 'offline' }));
    req.on('timeout', () => resolve({ status: 'timeout' }));
    req.end();
  });
};

checkBackend().then(status => {
  if (status.status === 'online') {
    console.log('‚úÖ Backend —Å–µ—Ä–≤–µ—Ä: –æ–Ω–ª–∞–π–Ω');
    console.log(`   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${status.database}`);
    console.log(`   - –í—Ä–µ–º—è: ${status.timestamp}`);
  } else {
    console.log(`‚ùå Backend —Å–µ—Ä–≤–µ—Ä: ${status.status}`);
    if (status.message) console.log(`   - –û—à–∏–±–∫–∞: ${status.message}`);
  }
});

console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
console.log('\nüì± –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend: npm run dev:backend');
console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ frontend: npm run dev:frontend');
console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ ngrok: ./start-ngrok.sh');
console.log('4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞: ./setup-bot.sh');
console.log('5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ Telegram!');
