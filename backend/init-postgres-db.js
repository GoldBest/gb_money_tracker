const { Pool } = require('pg');

// PostgreSQL connection
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

async function initDatabase() {
  try {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // Create tables
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        telegram_id TEXT UNIQUE NOT NULL,
        username TEXT,
        first_name TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);
    
    await pool.query(`
      CREATE TABLE IF NOT EXISTS categories (
        id SERIAL PRIMARY KEY,
        name TEXT NOT NULL,
        type TEXT NOT NULL CHECK(type IN ('income', 'expense')),
        color TEXT DEFAULT '#3B82F6',
        user_id INTEGER REFERENCES users(id),
        is_default BOOLEAN DEFAULT false
      );
    `);
    
    await pool.query(`
      CREATE TABLE IF NOT EXISTS transactions (
        id SERIAL PRIMARY KEY,
        amount DECIMAL(10,2) NOT NULL,
        description TEXT,
        type TEXT NOT NULL CHECK(type IN ('income', 'expense')),
        category_id INTEGER REFERENCES categories(id),
        user_id INTEGER REFERENCES users(id),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);
    
    await pool.query(`
      CREATE TABLE IF NOT EXISTS backups (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL REFERENCES users(id),
        name TEXT NOT NULL,
        description TEXT,
        data TEXT NOT NULL,
        size INTEGER NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);
    
    await pool.query(`
      CREATE TABLE IF NOT EXISTS budget_alerts (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL REFERENCES users(id),
        category_id INTEGER NOT NULL REFERENCES categories(id),
        limit_amount DECIMAL(10,2) NOT NULL,
        period TEXT NOT NULL CHECK(period IN ('daily', 'weekly', 'monthly')),
        enabled BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –≤ PostgreSQL');
    
    // Create default categories (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
    const defaultCategories = [
      // –î–æ—Ö–æ–¥—ã
      { name: '–ó–∞—Ä–ø–ª–∞—Ç–∞', type: 'income', color: '#10B981' },
      { name: '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞', type: 'income', color: '#06B6D4' },
      { name: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', type: 'income', color: '#8B5CF6' },
      { name: '–ü–æ–¥–∞—Ä–∫–∏', type: 'income', color: '#F59E0B' },
      { name: '–í–æ–∑–≤—Ä–∞—Ç', type: 'income', color: '#84CC16' },
      { name: '–ü—Ä–æ—Ü–µ–Ω—Ç—ã', type: 'income', color: '#22C55E' },
      { name: '–ü—Ä–æ–¥–∞–∂–∏', type: 'income', color: '#14B8A6' },
      
      // –†–∞—Å—Ö–æ–¥—ã
      { name: '–ü—Ä–æ–¥—É–∫—Ç—ã', type: 'expense', color: '#EF4444' },
      { name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', type: 'expense', color: '#F59E0B' },
      { name: '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ', type: 'expense', color: '#8B5CF6' },
      { name: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç/–¢–µ–ª–µ—Ñ–æ–Ω', type: 'expense', color: '#06B6D4' },
      { name: '–ó–¥–æ—Ä–æ–≤—å–µ', type: 'expense', color: '#EC4899' },
      { name: '–õ–µ–∫–∞—Ä—Å—Ç–≤–∞', type: 'expense', color: '#F97316' },
      { name: '–°—Ç—Ä–∞—Ö–æ–≤–∫–∞', type: 'expense', color: '#6366F1' },
      { name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', type: 'expense', color: '#8B5CF6' },
      { name: '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã', type: 'expense', color: '#F59E0B' },
      { name: '–ö–∞—Ñ–µ', type: 'expense', color: '#EF4444' },
      { name: '–û–¥–µ–∂–¥–∞', type: 'expense', color: '#EC4899' },
      { name: '–ö—Ä–∞—Å–æ—Ç–∞', type: 'expense', color: '#F97316' },
      { name: '–°–ø–æ—Ä—Ç', type: 'expense', color: '#10B981' },
      { name: '–ö–∏–Ω–æ/–¢–µ–∞—Ç—Ä', type: 'expense', color: '#8B5CF6' },
      { name: '–•–æ–±–±–∏', type: 'expense', color: '#06B6D4' },
      { name: '–î–æ–º/–†–µ–º–æ–Ω—Ç', type: 'expense', color: '#F59E0B' },
      { name: '–ú–µ–±–µ–ª—å', type: 'expense', color: '#EF4444' },
      { name: '–¢–µ—Ö–Ω–∏–∫–∞', type: 'expense', color: '#6366F1' },
      { name: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', type: 'expense', color: '#14B8A6' },
      { name: '–ö–Ω–∏–≥–∏', type: 'expense', color: '#84CC16' },
      { name: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', type: 'expense', color: '#06B6D4' },
      { name: '–û—Ç–µ–ª—å', type: 'expense', color: '#8B5CF6' },
      { name: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', type: 'expense', color: '#F59E0B' },
      { name: '–ü—Ä–æ—á–µ–µ', type: 'expense', color: '#6B7280' }
    ];
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ user_id (–æ–Ω–∏ –±—É–¥—É—Ç –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    for (const category of defaultCategories) {
      await pool.query(
        'INSERT INTO categories (name, type, color, is_default) VALUES ($1, $2, $3, $4) ON CONFLICT (name, type) DO NOTHING',
        [category.name, category.type, category.color, true]
      );
    }
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${defaultCategories.length} –±–∞–∑–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    await pool.query('CREATE INDEX IF NOT EXISTS idx_users_telegram_id ON users(telegram_id);');
    await pool.query('CREATE INDEX IF NOT EXISTS idx_categories_user_id ON categories(user_id);');
    await pool.query('CREATE INDEX IF NOT EXISTS idx_transactions_user_id ON transactions(user_id);');
    await pool.query('CREATE INDEX IF NOT EXISTS idx_transactions_category_id ON transactions(category_id);');
    await pool.query('CREATE INDEX IF NOT EXISTS idx_transactions_created_at ON transactions(created_at);');
    
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');
    
    console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    throw error;
  } finally {
    await pool.end();
  }
}

// Run initialization if called directly
if (require.main === module) {
  initDatabase().catch(console.error);
}

module.exports = { initDatabase };
