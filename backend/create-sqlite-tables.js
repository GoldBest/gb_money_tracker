const Database = require('better-sqlite3');
const path = require('path');

// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(__dirname, 'money_tracker.db');
const db = new Database(dbPath);

console.log('üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', dbPath);

async function createTables() {
  try {
    console.log('üîÑ –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—ã –≤ SQLite...');
    
    // Create users table
    db.exec(`
      CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id TEXT UNIQUE NOT NULL,
        username TEXT,
        first_name TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      );
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞');
    
    // Create categories table
    db.exec(`
      CREATE TABLE IF NOT EXISTS categories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        type TEXT NOT NULL CHECK(type IN ('income', 'expense')),
        color TEXT DEFAULT '#3B82F6',
        user_id INTEGER REFERENCES users(id)
      );
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ categories —Å–æ–∑–¥–∞–Ω–∞');
    
    // Create transactions table
    db.exec(`
      CREATE TABLE IF NOT EXISTS transactions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        amount DECIMAL(10,2) NOT NULL,
        description TEXT,
        type TEXT NOT NULL CHECK(type IN ('income', 'expense')),
        category_id INTEGER REFERENCES categories(id),
        user_id INTEGER REFERENCES users(id),
        date DATE DEFAULT CURRENT_DATE,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      );
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ transactions —Å–æ–∑–¥–∞–Ω–∞');
    
    // Create backups table
    db.exec(`
      CREATE TABLE IF NOT EXISTS backups (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL REFERENCES users(id),
        name TEXT NOT NULL,
        description TEXT,
        data TEXT NOT NULL,
        size INTEGER NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      );
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ backups —Å–æ–∑–¥–∞–Ω–∞');
    
    // Create budget_alerts table
    db.exec(`
      CREATE TABLE IF NOT EXISTS budget_alerts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL REFERENCES users(id),
        category_id INTEGER NOT NULL REFERENCES categories(id),
        limit_amount DECIMAL(10,2) NOT NULL,
        period TEXT NOT NULL CHECK(period IN ('daily', 'weekly', 'monthly')),
        enabled BOOLEAN DEFAULT 1,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      );
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ budget_alerts —Å–æ–∑–¥–∞–Ω–∞');
    
    // Create goals table
    db.exec(`
      CREATE TABLE IF NOT EXISTS goals (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL REFERENCES users(id),
        name TEXT NOT NULL,
        target_amount DECIMAL(10,2) NOT NULL,
        current_amount DECIMAL(10,2) DEFAULT 0,
        deadline DATE,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      );
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ goals —Å–æ–∑–¥–∞–Ω–∞');
    
    // Create notifications table
    db.exec(`
      CREATE TABLE IF NOT EXISTS notifications (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL REFERENCES users(id),
        title TEXT NOT NULL,
        message TEXT NOT NULL,
        type TEXT DEFAULT 'info',
        read BOOLEAN DEFAULT 0,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      );
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ notifications —Å–æ–∑–¥–∞–Ω–∞');
    
    // Insert default categories for user ID 1
    const defaultCategories = [
      { name: '–ü—Ä–æ–¥—É–∫—Ç—ã', type: 'expense', color: '#EF4444' },
      { name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', type: 'expense', color: '#F59E0B' },
      { name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', type: 'expense', color: '#8B5CF6' },
      { name: '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ', type: 'expense', color: '#EC4899' },
      { name: '–ó–∞—Ä–ø–ª–∞—Ç–∞', type: 'income', color: '#10B981' },
      { name: '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞', type: 'income', color: '#06B6D4' },
      { name: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', type: 'income', color: '#84CC16' },
      { name: '–ü–æ–¥–∞—Ä–∫–∏', type: 'income', color: '#F97316' }
    ];
    
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const insertUser = db.prepare(`
      INSERT OR IGNORE INTO users (id, telegram_id, username, first_name) 
      VALUES (1, '123456789', 'test_user', 'Test User')
    `);
    insertUser.run();
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const insertCategory = db.prepare(`
      INSERT OR IGNORE INTO categories (name, type, color, user_id) 
      VALUES (?, ?, ?, 1)
    `);
    
    for (const category of defaultCategories) {
      insertCategory.run(category.name, category.type, category.color);
    }
    console.log('‚úÖ –ë–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const insertTransaction = db.prepare(`
      INSERT OR IGNORE INTO transactions (amount, description, type, category_id, user_id, date) 
      VALUES (?, ?, ?, ?, 1, ?)
    `);
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const testTransactions = [
      { amount: 50000, description: '–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –∞–≤–≥—É—Å—Ç', type: 'income', category_id: 5, date: '2024-08-01' },
      { amount: 1500, description: '–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é', type: 'expense', category_id: 1, date: '2024-08-05' },
      { amount: 500, description: '–ü—Ä–æ–µ–∑–¥ –Ω–∞ –º–µ—Ç—Ä–æ', type: 'expense', category_id: 2, date: '2024-08-06' },
      { amount: 2000, description: '–ü–æ—Ö–æ–¥ –≤ –∫–∏–Ω–æ', type: 'expense', category_id: 3, date: '2024-08-07' }
    ];
    
    for (const transaction of testTransactions) {
      insertTransaction.run(
        transaction.amount,
        transaction.description,
        transaction.type,
        transaction.category_id,
        transaction.date
      );
    }
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    
    console.log('üéâ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü:', error);
  } finally {
    db.close();
    console.log('üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

createTables();
