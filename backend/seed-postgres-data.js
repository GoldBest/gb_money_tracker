const { Pool } = require('pg');

// PostgreSQL connection
const pool = new Pool({
  connectionString: process.env.DATABASE_URL || 'postgresql://postgres:postgres@localhost:5433/gbmoneytracker',
  ssl: false
});

async function seedData() {
  try {
    console.log('üå± –î–æ–±–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL...');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await pool.query(`
      INSERT INTO users (telegram_id, username, first_name) 
      VALUES ('123456789', 'test_user', 'Test User')
      ON CONFLICT (telegram_id) DO NOTHING
      RETURNING id
    `);
    
    let userId;
    if (userResult.rows.length > 0) {
      userId = userResult.rows[0].id;
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID:', userId);
    } else {
      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const existingUser = await pool.query('SELECT id FROM users WHERE telegram_id = $1', ['123456789']);
      userId = existingUser.rows[0].id;
      console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID:', userId);
    }
    
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const defaultCategories = [
      { name: '–ü—Ä–æ–¥—É–∫—Ç—ã', type: 'expense', color: '#EF4444' },
      { name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', type: 'expense', color: '#F59E0B' },
      { name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', type: 'expense', color: '#8B5CF6' },
      { name: '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ', type: 'expense', color: '#EC4899' },
      { name: '–ó–∞—Ä–ø–ª–∞—Ç–∞', type: 'income', color: '#10B981' },
      { name: '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞', type: 'income', color: '#06B6D4' },
      { name: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', type: 'income', color: '#84CC16' },
      { name: '–ü–æ–¥–∞—Ä–∫–∏', type: 'income', color: '#F97316' }
    ];
    
    for (const category of defaultCategories) {
      await pool.query(`
        INSERT INTO categories (name, type, color, user_id) 
        VALUES ($1, $2, $3, $4)
        ON CONFLICT DO NOTHING
      `, [category.name, category.type, category.color, userId]);
    }
    console.log('‚úÖ –ë–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã');
    
    // –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const categories = await pool.query('SELECT id, name FROM categories WHERE user_id = $1', [userId]);
    const categoryMap = {};
    categories.rows.forEach(cat => {
      categoryMap[cat.name] = cat.id;
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const testTransactions = [
      { amount: 50000, description: '–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –∞–≤–≥—É—Å—Ç', type: 'income', category_id: categoryMap['–ó–∞—Ä–ø–ª–∞—Ç–∞'], date: '2024-08-01' },
      { amount: 1500, description: '–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é', type: 'expense', category_id: categoryMap['–ü—Ä–æ–¥—É–∫—Ç—ã'], date: '2024-08-05' },
      { amount: 500, description: '–ü—Ä–æ–µ–∑–¥ –Ω–∞ –º–µ—Ç—Ä–æ', type: 'expense', category_id: categoryMap['–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç'], date: '2024-08-06' },
      { amount: 2000, description: '–ü–æ—Ö–æ–¥ –≤ –∫–∏–Ω–æ', type: 'expense', category_id: categoryMap['–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è'], date: '2024-08-07' }
    ];
    
    for (const transaction of testTransactions) {
      await pool.query(`
        INSERT INTO transactions (amount, description, type, category_id, user_id, date) 
        VALUES ($1, $2, $3, $4, $5, $6)
        ON CONFLICT DO NOTHING
      `, [transaction.amount, transaction.description, transaction.type, transaction.category_id, userId, transaction.date]);
    }
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await pool.end();
    console.log('üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

seedData();
